<div class="container">
  <div class="row">
    <div class="col-xs-6 col-lg-12">
      <h1 class="text-center"> Index des requests</h1>
      <h1> search bar for address car - bike</h1>
      <div>
        <%= simple_form_for :search, url: requests_path, :method => :get, :class => "form-inline" do |f| %>
          <div class="col-lg-3 col-sm-6 form-group">
            <%= f.input :address, as: :string, input_html: {id: "address"}, required: true, autocomplete: "on" %>
             <%= f.input :radius, as: :integer, input_html: {id: "radius", value: 5} %>
          </div>
          <div class="col-lg-3 col-sm-6 form-group">
            <%= f.submit "Search", class: "btn btn-primary" %>
          </div>
        <% end %>
      </div>
      <div class="col-xs-6 col-lg-12">
        <div id="map" style='width: 100%; height: 600px;'></div>
      </div>
    </div>
  </div>
</div>

<%= content_for(:after_js) do %>
  <script>
    function initialize() {
      var input = document.getElementById('address');
      var autocomplete = new google.maps.places.Autocomplete(input);
    }
    google.maps.event.addDomListener(window, 'load', initialize);
  </script>
  <script type="text/javascript">
  $(document).on('ready', function() {
    var directionsDisplay = new google.maps.DirectionsRenderer();
    var directionsService = new google.maps.DirectionsService();

    function calcRoute(lat_departure, lng_departure, lat_arrival, lng_arrival) {
      console.log('lat_departure :' + lat_departure)
      var origin      = new google.maps.LatLng(lat_departure, lng_departure);
      var destination = new google.maps.LatLng(lat_arrival, lng_arrival);
      var request = {
          origin:      origin,
          destination: destination,
          travelMode:  google.maps.TravelMode.DRIVING
      };
      directionsService.route(request, function(response, status) {
        if (status == google.maps.DirectionsStatus.OK) {
          directionsDisplay.setDirections(response);
        }
      });
    }

    var handler = Gmaps.build('Google');
    handler.buildMap({ internal: { id: 'map' } }, function(){
      markers = handler.addMarkers(<%= raw @hash.to_json %>);
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
      // directionsDisplay.setMap(handler.getMap());
      if (markers.length == 0) {
        handler.getMap().setZoom(2);
      } else if (markers.length == 1) {
        handler.getMap().setZoom(14);
      };
      markers.forEach(function(marker) {
        // Listen if marker is clicked => if clicked : display directions
        google.maps.event.addListener(marker, 'click', function(){
          alert('call calcRoute')
          calcRoute(marker.lat, marker.lng, marker.json.lat_arrival.to_f, marker.json.lng_arrival.to_f);
        });
      })
    });

  });
  </script>
<% end %>


